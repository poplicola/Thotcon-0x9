//Morse saying thotcon
const char* thotconMorse0 = "- .... --- - -.-. --";
const char* thotconMorse0Temp = "                    ";
const char* thotconMorse1 = "- - - .... --- - -.-";
const char* thotconMorse1Temp = "                    ";
const char* thotconMorse2 = ". --- - - .... --- -";
const char* thotconMorse2Temp = "                    ";
const char* thotconMorse3 = " -.-. --- - - .... -";
const char* thotconMorse3Temp = "                    ";
const char* thotconMorse4 = "-- - -.-. --- - - ..";
const char* thotconMorse4Temp = "                    ";
const char* thotconMorse5 = ".. --- - -.-. --- - ";
const char* thotconMorse5Temp = "                    ";
const char* thotconMorse6 = "- .... --- - -.-. --";
const char* thotconMorse6Temp = "                    ";
const char* thotconMorse7 = "- - - .... --- - -.-";
const char* thotconMorse7Temp = "                    ";

const char* thotconBinary0 = "01010100010010010011";
const char* thotconBinary1 = "11010101000100001101";
const char* thotconBinary2 = "00111101001110010101";
const char* thotconBinary3 = "00010010010011110101";
const char* thotconBinary4 = "01000100001101001111";
const char* thotconBinary5 = "01001110010101000100";
const char* thotconBinary6 = "10010011110101010001";
const char* thotconBinary7 = "00001101001111010011";

const char* hex0 = "54484F54434F4E54484F";
const char* hex1 = "54434F4E54484F54434F";
const char* hex2 = "4E54484F54434F4E5448";
const char* hex3 = "4F54434F4E54484F5443";
const char* hex4 = "4F4E54484F54434F4E54";
const char* hex5 = "484F54434F4E54484F54";
const char* hex6 = "434F4E54484F54434F4E";
const char* hex7 = "54484F54434F4E54484F";

const char* hexLead0 = "C7F1V3J4KU54K347UC0M";
const char* hexLead1 = "V1D30M4NC7F1V3J4KU54";
const char* hexLead2 = "K347UC0MV1D30M4NC7F1";
const char* hexLead3 = "V3J4KU54K347UC0MV1D3";
const char* hexLead4 = "0M4NC7F1V3J4KU54K347";
const char* hexLead5 = "UC0MV1D30M4NC7F1V3J4";
const char* hexLead6 = "KU54K347UC0MV1D30M4N";
const char* hexLead7 = "C7F1V3J4KU54K347UC0M";

const char* badgeBin0 = "01010100010010000100";
const char* badgeBin1 = "10010101001101001001";
const char* badgeBin2 = "01010011010110010100";
const char* badgeBin3 = "11110101010101010010";
const char* badgeBin4 = "01000010010000010100";
const char* badgeBin5 = "01000100011101000101";
const char* badgeBin6 = "01010100010010000100";
const char* badgeBin7 = "10010101001101001001";


#define MASK_BMPWIDTH  102
#define MASK_BMPHEIGHT 64

static unsigned char mask[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xf0, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
   0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
   0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
   0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x10, 0xf0, 0xff, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xf0, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xb8, 0x1f, 0x00, 0x7e, 0x07, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x4e, 0x70, 0x80, 0x83, 0x1c, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xc0, 0xc0, 0x00, 0x14, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x7f, 0x00, 0x14, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x9e, 0x61, 0x1e, 0x14,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x7f, 0x80, 0x3f,
   0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x30, 0x00,
   0x03, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x08,
   0x00, 0x04, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a,
   0x06, 0x0c, 0x18, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xfb, 0x01, 0x1e, 0xf0, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x80, 0x7f, 0x00, 0x3f, 0x80, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x40, 0x8a, 0x80, 0x61, 0x40, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x20, 0x8b, 0x40, 0x80, 0x40, 0x34, 0x01, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xa0, 0x15, 0x23, 0x21, 0x31, 0x6a, 0x01, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xe0, 0x2a, 0x1e, 0x12, 0x1e, 0xd5, 0x01, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x55, 0x08, 0x1e, 0x84, 0x2a, 0x01,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x2a, 0x3f, 0x33, 0x5f, 0x95,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xd4, 0xe0, 0xe1, 0xe1,
   0xca, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xa8, 0x00, 0x1e,
   0x20, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91, 0x00,
   0x21, 0x20, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a,
   0x81, 0x52, 0x20, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x04, 0x42, 0x9e, 0x10, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x04, 0x44, 0xbf, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x04, 0x4f, 0x9e, 0x3c, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x84, 0x3f, 0x3f, 0x7f, 0x04, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xc4, 0x7f, 0xbf, 0xff, 0x04, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x7f, 0x9e, 0xff, 0x06, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x7f, 0xbf, 0x7f, 0x02, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x7f, 0xbf, 0x3f, 0x01,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x11, 0x80,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x60,
   0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,
   0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00
};

static unsigned char grid[] = {
   0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06,
   0x18, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01,
   0x06, 0x18, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80,
   0x01, 0x06, 0x18, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60,
   0x80, 0x01, 0x06, 0x18, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18,
   0x60, 0x80, 0x01, 0x06, 0x18, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06,
   0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01,
   0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x01, 0x06, 0x18, 0x60, 0x80,
   0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x01, 0x06,
   0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x01,
   0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18,
   0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06,
   0x18, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01,
   0x06, 0x18, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80,
   0x01, 0x06, 0x18, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60,
   0x80, 0x01, 0x06, 0x18, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18,
   0x60, 0x80, 0x01, 0x06, 0x18, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06,
   0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x01, 0x06, 0x18, 0x60,
   0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x01, 0x06, 0x18,
   0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x01, 0x06,
   0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x01,
   0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18,
   0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06,
   0x18, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01,
   0x06, 0x18, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80,
   0x01, 0x06, 0x18, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60,
   0x80, 0x01, 0x06, 0x18, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01,
   0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x01, 0x06, 0x18, 0x60, 0x80,
   0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x01, 0x06, 0x18, 0x60,
   0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x01, 0x06, 0x18,
   0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x01, 0x06,
   0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x01,
   0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18,
   0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06,
   0x18, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01,
   0x06, 0x18, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0x3f, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18,
   0x60, 0x80, 0x01, 0x06, 0x18, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06,
   0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01,
   0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x01, 0x06, 0x18, 0x60, 0x80,
   0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x01, 0x06, 0x18, 0x60,
   0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x01, 0x06, 0x18,
   0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x01, 0x06,
   0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x01,
   0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0x3f, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80,
   0x01, 0x06, 0x18, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60,
   0x80, 0x01, 0x06, 0x18, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18,
   0x60, 0x80, 0x01, 0x06, 0x18, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06,
   0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01,
   0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x01, 0x06, 0x18, 0x60, 0x80,
   0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x01, 0x06, 0x18, 0x60,
   0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x01, 0x06, 0x18,
   0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f,
   0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06,
   0x18, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01,
   0x06, 0x18, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60, 0x80,
   0x01, 0x06, 0x18, 0x01, 0x06, 0x18, 0x60, 0x80, 0x01, 0x06, 0x18, 0x60,
   0x80, 0x01, 0x06, 0x18 };
   
static unsigned char title[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x1d, 0xce, 0x9f,
   0xff, 0xfc, 0xf1, 0x67, 0x30, 0x00, 0x00, 0x00, 0x00, 0xff, 0x1d, 0xee,
   0xbf, 0xff, 0xfe, 0xfb, 0xef, 0x30, 0x00, 0x00, 0x00, 0x00, 0x38, 0x1c,
   0x6e, 0x30, 0x1c, 0x06, 0x1b, 0xec, 0x31, 0x00, 0x00, 0x00, 0x00, 0x38,
   0xfc, 0x6f, 0x30, 0x1c, 0x06, 0x18, 0xec, 0x33, 0x00, 0x00, 0x00, 0x00,
   0x38, 0xfc, 0x6f, 0x30, 0x1c, 0x06, 0x18, 0x6c, 0x37, 0x00, 0x00, 0x00,
   0x00, 0x38, 0xfc, 0x6f, 0x30, 0x1c, 0x06, 0x1b, 0x6c, 0x3e, 0x00, 0x00,
   0x00, 0x00, 0x38, 0x1c, 0xee, 0x3f, 0x1c, 0xfe, 0xfb, 0x6f, 0x3c, 0x00,
   0x00, 0x00, 0x00, 0x38, 0x1c, 0xce, 0x1f, 0x1c, 0xfc, 0xf1, 0x67, 0x38,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x36,
   0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63,
   0x14, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x6b, 0x1c, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x6b, 0x08, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x6b, 0x1c, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x63, 0x14, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x3e, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00 };

#define QRCode_width 58
#define QRCode_height 58
static unsigned char QRCode[] = {
    0xff, 0x3f, 0xff, 0x00, 0xff, 0xf3, 0xff, 0x03, 0xff, 0x3f, 0xff, 0x00,
   0xff, 0xf3, 0xff, 0x03, 0x03, 0x30, 0x33, 0x0f, 0x0c, 0x33, 0x00, 0x03,
   0x03, 0x30, 0x33, 0x0f, 0x0c, 0x33, 0x00, 0x03, 0xf3, 0x33, 0xf0, 0xff,
   0xc3, 0x33, 0x3f, 0x03, 0xf3, 0x33, 0xf0, 0xff, 0xc3, 0x33, 0x3f, 0x03,
   0xf3, 0x33, 0xc3, 0xc3, 0x0f, 0x33, 0x3f, 0x03, 0xf3, 0x33, 0xc3, 0xc3,
   0x0f, 0x33, 0x3f, 0x03, 0xf3, 0x33, 0x00, 0xfc, 0xc3, 0x30, 0x3f, 0x03,
   0xf3, 0x33, 0x00, 0xfc, 0xc3, 0x30, 0x3f, 0x03, 0x03, 0x30, 0x30, 0x30,
   0xc0, 0x30, 0x00, 0x03, 0x03, 0x30, 0x30, 0x30, 0xc0, 0x30, 0x00, 0x03,
   0xff, 0x3f, 0x33, 0x33, 0x33, 0xf3, 0xff, 0x03, 0xff, 0x3f, 0x33, 0x33,
   0x33, 0xf3, 0xff, 0x03, 0x00, 0x00, 0x3f, 0xfc, 0x3f, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x3f, 0xfc, 0x3f, 0x00, 0x00, 0x00, 0xf3, 0xfc, 0xcc, 0xff,
   0xff, 0x33, 0xcc, 0x03, 0xf3, 0xfc, 0xcc, 0xff, 0xff, 0x33, 0xcc, 0x03,
   0x30, 0xc3, 0xcc, 0x00, 0xc3, 0xff, 0x0f, 0x03, 0x30, 0xc3, 0xcc, 0x00,
   0xc3, 0xff, 0x0f, 0x03, 0xcc, 0x30, 0x00, 0x33, 0x00, 0x3c, 0xc0, 0x00,
   0xcc, 0x30, 0x00, 0x33, 0x00, 0x3c, 0xc0, 0x00, 0xc0, 0xc0, 0xf0, 0xfc,
   0xf0, 0xf3, 0xc0, 0x03, 0xc0, 0xc0, 0xf0, 0xfc, 0xf0, 0xf3, 0xc0, 0x03,
   0xf0, 0xf0, 0x3c, 0x03, 0x3c, 0x03, 0xf0, 0x00, 0xf0, 0xf0, 0x3c, 0x03,
   0x3c, 0x03, 0xf0, 0x00, 0x3f, 0x0f, 0x3c, 0xcc, 0xc0, 0x30, 0x3c, 0x03,
   0x3f, 0x0f, 0x3c, 0xcc, 0xc0, 0x30, 0x3c, 0x03, 0xf3, 0x30, 0xc0, 0x30,
   0xff, 0xc3, 0xc0, 0x03, 0xf3, 0x30, 0xc0, 0x30, 0xff, 0xc3, 0xc0, 0x03,
   0x33, 0xc3, 0xc0, 0x0f, 0xf3, 0xc3, 0xcf, 0x00, 0x33, 0xc3, 0xc0, 0x0f,
   0xf3, 0xc3, 0xcf, 0x00, 0xcf, 0xf0, 0x0f, 0xc0, 0xf0, 0xcf, 0x03, 0x03,
   0xcf, 0xf0, 0x0f, 0xc0, 0xf0, 0xcf, 0x03, 0x03, 0x30, 0x03, 0x30, 0xcf,
   0x30, 0xc3, 0x0c, 0x00, 0x30, 0x03, 0x30, 0xcf, 0x30, 0xc3, 0x0c, 0x00,
   0x03, 0x3c, 0x3f, 0xc3, 0x03, 0x30, 0x0c, 0x00, 0x03, 0x3c, 0x3f, 0xc3,
   0x03, 0x30, 0x0c, 0x00, 0xf0, 0x00, 0xf0, 0xc0, 0xcf, 0x33, 0xfc, 0x00,
   0xf0, 0x00, 0xf0, 0xc0, 0xcf, 0x33, 0xfc, 0x00, 0x3c, 0x3f, 0xf0, 0xcf,
   0xff, 0xff, 0x3f, 0x00, 0x3c, 0x3f, 0xf0, 0xcf, 0xff, 0xff, 0x3f, 0x00,
   0x00, 0x00, 0xcf, 0x3f, 0x3f, 0x03, 0xc3, 0x03, 0x00, 0x00, 0xcf, 0x3f,
   0x3f, 0x03, 0xc3, 0x03, 0xff, 0x3f, 0x03, 0x0f, 0xcf, 0x33, 0xc3, 0x00,
   0xff, 0x3f, 0x03, 0x0f, 0xcf, 0x33, 0xc3, 0x00, 0x03, 0x30, 0xcf, 0xc0,
   0x03, 0x03, 0xc3, 0x03, 0x03, 0x30, 0xcf, 0xc0, 0x03, 0x03, 0xc3, 0x03,
   0xf3, 0x33, 0xf0, 0xf3, 0x0c, 0xff, 0x33, 0x00, 0xf3, 0x33, 0xf0, 0xf3,
   0x0c, 0xff, 0x33, 0x00, 0xf3, 0x33, 0x03, 0xf3, 0xc3, 0xcf, 0x33, 0x03,
   0xf3, 0x33, 0x03, 0xf3, 0xc3, 0xcf, 0x33, 0x03, 0xf3, 0x33, 0xc3, 0x3f,
   0xff, 0xc0, 0x00, 0x03, 0xf3, 0x33, 0xc3, 0x3f, 0xff, 0xc0, 0x00, 0x03,
   0x03, 0x30, 0xf0, 0xfc, 0x03, 0x03, 0xcf, 0x00, 0x03, 0x30, 0xf0, 0xfc,
   0x03, 0x03, 0xcf, 0x00, 0xff, 0x3f, 0xc3, 0x33, 0xf3, 0x3f, 0xc0, 0x00,
   0xff, 0x3f, 0xc3, 0x33, 0xf3, 0x3f, 0xc0, 0x00 };


   
void morse_display() {
  u8g2.setFont(u8g2_font_5x7_mf);
  
  for(int i = 0; i < 8; i++){
    u8g2.firstPage();
    do{
    if(i==0){
    thotconMorse0Temp = thotconMorse0;
    }
    u8g2.drawStr(1, 8, thotconMorse0Temp);
    if(i==1){
    thotconMorse1Temp = thotconMorse1;
    }
    u8g2.drawStr(1, 16, thotconMorse1Temp);
    if(i==2){
    thotconMorse2Temp = thotconMorse2;
    }
    u8g2.drawStr(1, 24, thotconMorse2Temp);
    if(i==3){
    thotconMorse3Temp = thotconMorse3;
    }
    u8g2.drawStr(1, 32, thotconMorse3Temp);
    if(i==4){
    thotconMorse4Temp = thotconMorse4;
    }
    u8g2.drawStr(1, 40, thotconMorse4Temp);
    if(i==5){
    thotconMorse5Temp = thotconMorse5;
    }
    u8g2.drawStr(1, 48, thotconMorse5Temp);
    if(i==6){
    thotconMorse6Temp = thotconMorse6;
    }
    u8g2.drawStr(1, 56, thotconMorse6Temp);
    if(i==7){
    thotconMorse7Temp = thotconMorse7;
    }
    u8g2.drawStr(1, 64, thotconMorse7Temp);
  } while(u8g2.nextPage());
  }
  delay(150);
}

void binary_display() {
  u8g2.setFont(u8g2_font_5x7_mf);
  for(int i = 0; i < 8; i ++){
      
  u8g2.firstPage();
  do {
    if(i==0){
    thotconMorse0Temp = thotconBinary0;
    }
    u8g2.drawStr(1, 8, thotconMorse0Temp);
    if(i==1){
    thotconMorse1Temp = thotconBinary1;
    }
    u8g2.drawStr(1, 16, thotconMorse1Temp);
    if(i==2){
    thotconMorse2Temp = thotconBinary2;
    }
    u8g2.drawStr(1, 24, thotconMorse2Temp);
    if(i==3){
    thotconMorse3Temp = thotconBinary3;
    }
    u8g2.drawStr(1, 32, thotconMorse3Temp);
    if(i==4){
    thotconMorse4Temp = thotconBinary4;
    }
    u8g2.drawStr(1, 40, thotconMorse4Temp);
    if(i==5){
    thotconMorse5Temp = thotconBinary5;
    }
    u8g2.drawStr(1, 48, thotconMorse5Temp);
    if(i==6){
    thotconMorse6Temp = thotconBinary6;
    }
    u8g2.drawStr(1, 56, thotconMorse6Temp);
    if(i==7){
    thotconMorse7Temp = thotconBinary7;
    }
    u8g2.drawStr(1, 64, thotconMorse7Temp);
  } while (u8g2.nextPage());
  
}
}

void hex_display() {
  u8g2.setFont(u8g2_font_5x7_mf);
  
  for(int i = 0; i < 8; i ++){
  u8g2.firstPage();
  do {
    if(i==0){
    thotconMorse0Temp = hex0;
    }
    u8g2.drawStr(1, 8, thotconMorse0Temp);
    if(i==1){
    thotconMorse1Temp = hex1;
    }
    u8g2.drawStr(1, 16, thotconMorse1Temp);
    if(i==2){
    thotconMorse2Temp = hex2;
    }
    u8g2.drawStr(1, 24, thotconMorse2Temp);
    if(i==3){
    thotconMorse3Temp = hex3;
    }
    u8g2.drawStr(1, 32, thotconMorse3Temp);
    if(i==4){
    thotconMorse4Temp = hex4;
    }
    u8g2.drawStr(1, 40, thotconMorse4Temp);
    if(i==5){
    thotconMorse5Temp = hex5;
    }
    u8g2.drawStr(1, 48, thotconMorse5Temp);
    if(i==6){
    thotconMorse6Temp = hex6;
    }
    u8g2.drawStr(1, 56, thotconMorse6Temp);
    if(i==7){
    thotconMorse7Temp = hex7;
    }
    u8g2.drawStr(1, 64, thotconMorse7Temp);
  } while (u8g2.nextPage());
  delay(50);
}
}

void hexLead_display() {
  u8g2.setFont(u8g2_font_5x7_mf);
  for(int i = 0; i < 8; i ++){
  u8g2.firstPage();
  do {
    if(i==0){
    thotconMorse0Temp = hexLead0;
    }
    u8g2.drawStr(1, 8, thotconMorse0Temp);
    if(i==1){
    thotconMorse1Temp = hexLead1;
    }
    u8g2.drawStr(1, 16, thotconMorse1Temp);
    if(i==2){
    thotconMorse2Temp = hexLead2;
    }
    u8g2.drawStr(1, 24, thotconMorse2Temp);
    if(i==3){
    thotconMorse3Temp = hexLead3;
    }
    u8g2.drawStr(1, 32, thotconMorse3Temp);
    if(i==4){
    thotconMorse4Temp = hexLead4;
    }
    u8g2.drawStr(1, 40, thotconMorse4Temp);
    if(i==5){
    thotconMorse5Temp = hexLead5;
    }
    u8g2.drawStr(1, 48, thotconMorse5Temp);
    if(i==6){
    thotconMorse6Temp = hexLead6;
    }
    u8g2.drawStr(1, 56, thotconMorse6Temp);
    if(i==7){
    thotconMorse7Temp = hexLead7;
    }
    u8g2.drawStr(1, 64, thotconMorse7Temp);
  } while (u8g2.nextPage());
  delay(50);
}
}

void badgeBin_display() {
  u8g2.setFont(u8g2_font_5x7_mf);
  for(int i = 0; i < 8; i ++){
  u8g2.firstPage();
  do {
    if(i==0){
    thotconMorse0Temp = badgeBin0;
    }
    u8g2.drawStr(1, 8, thotconMorse0Temp);
    if(i==1){
    thotconMorse1Temp = badgeBin1;
    }
    u8g2.drawStr(1, 16, thotconMorse1Temp);
    if(i==2){
    thotconMorse2Temp = badgeBin2;
    }
    u8g2.drawStr(1, 24, thotconMorse2Temp);
    if(i==3){
    thotconMorse3Temp = badgeBin3;
    }
    u8g2.drawStr(1, 32, thotconMorse3Temp);
    if(i==4){
    thotconMorse4Temp = badgeBin4;
    }
    u8g2.drawStr(1, 40, thotconMorse4Temp);
    if(i==5){
    thotconMorse5Temp = badgeBin5;
    }
    u8g2.drawStr(1, 48, thotconMorse5Temp);
    if(i==6){
    thotconMorse6Temp = badgeBin6;
    }
    u8g2.drawStr(1, 56, thotconMorse6Temp);
    if(i==7){
    thotconMorse7Temp = badgeBin7;
    }
    u8g2.drawStr(1, 64, thotconMorse7Temp);
  } while (u8g2.nextPage());
  delay(50);
}
}
void grid_display() {
   u8g2.firstPage();
  do {
    u8g2.setDrawColor(1);
    u8g2.drawXBM( 0, 0, MASK_BMPWIDTH, MASK_BMPHEIGHT, grid);
  } while (u8g2.nextPage());
delay(1000);
}
void mask_display() {
  for(int i = -50; i < 0; i+=3){
       u8g2.firstPage();
  do {
    u8g2.setDrawColor(1);
    u8g2.drawXBM( 0, i, MASK_BMPWIDTH, MASK_BMPHEIGHT, mask);
  } while (u8g2.nextPage());
  }
delay(1700);
}
void title_display() {
  for(int i = 50; i > 0; i-=3){
       u8g2.firstPage();
  do {
    u8g2.setDrawColor(1);
    u8g2.drawXBM( 0, i, MASK_BMPWIDTH, MASK_BMPHEIGHT, title);
    //u8g2.drawXBM( 40, i, QRCode_width, QRCode_height, QRCode);
  } while (u8g2.nextPage());
  }
delay(1500);
}

void runBoot(){
  if(isBooting){
  if(bootCounter == 0){
    morse_display();
    delay(1300);
  }
  else if(bootCounter == 1){
    binary_display();
    delay(1300);
  }
  else if(bootCounter == 2){
    hex_display();
    delay(1300);
  }
  else if(bootCounter == 3){
    hexLead_display();
    delay(1300);
  }
  else if(bootCounter == 4){
    badgeBin_display();
    delay(1300);
  }
  else if(bootCounter == 5){
    grid_display();
    delay(200);
  }
  else if(bootCounter == 6){
    mask_display();
  }
  else if(bootCounter == 7){
    title_display();
    isBooting = false;
    menuActive = true;
  }

  bootCounter++;
  }
}

